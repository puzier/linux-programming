1. 用户和组：系统密码文件`/etc/passwd`每一行代表一个用户，出于安全考虑，用户密码往往存储于单独的`/etc/shadow`密码文件中。
2. 路径和链接：目录是一种特殊类型的文件，内容采用表格形式，数据项包括文件名以及相对应文件的引用。这一“文件名+引用”的组合被称为链接。每个文件都可以有多条链接，因而也可以有多个名称，在相同或者不同的目录中出现。
3. 符号链接：为了应对可能出现的循环引用，内核对解引用的次数做了限制。
4. 文件名：SUSv3将65个字符的集合[-._a-zA-Z0-9]称为可移植文件名字符集。
5. 当前工作目录：进程的当前工作目录继承自其父进程。对登录shell来说，其初始当前工作目录，是依据密码文件中该用户记录的主目录字段来设置。可以使用cd命令来改变shell的当前工作目录。
6. 目录的权限：读，允许列出目录内容；写，允许对目录内容进行更改（添加、修改、删除文件名）;执行，允许对目录中的文件进行访问(需要受到文件自身访问权限的约束)。
7. stdio函数库：stdio函数位于I/O系统调用层之上。
8. 创建进程和执行程序：子进程从父进程继承数据段、栈段、以及堆段的副本后，可以修改这些内容，不会影响父进程原版内容，文本段为只读，由父、子进程共享。子进程要么去执行与父进程共享代码段中的另一组不同函数，或者，更为常见的情况是使用系统调用execve()去加载并执行一个全新程序。execve()会销毁现有的文本段、数据段、栈段以及堆段，并根据新程序的代码，创建新段来替换它们。
9. 进程终止和终止状态：可以以两种方式来终止一个进程：其一，进程可使用_exit()系统调用（或相关的exit()库函数），请求退出；其二，向进程传递信号，将其杀死。无论以何种方式退出，进程都会生成“终止状态”，一个非负小整数，可供父进程的wait()系统调用检测。
10. init进程：init进程的进程号总为1，且总是以超级用户权限运行。
11. 守护进程：1，长生不老，守护进程通常在系统引导时启动，直至系统关闭前，会一直健在。2，守护进行在后台运行，且无控制终端供其读取或写入数据。
12. 环境列表：由fork()创建的新进程，会继承父进程的环境副本，这也为父子进程间通讯提供了一种机制。当进程调用exec()替换当前正在运行的程序时，新程序要么继承老程序的环境，要么在exec()调用的参数中指定新的环境并加以接收。在大多数shell中，可以使用export命令来创建环境变量，C语言可以使用外部变量（char **environ）来访问环境。
13. 信号：在shell中，可使用kill命令向进程发送信号，在程序内部，系统调用kill()可提供相同的功能。
14. 线程：每个进程都可执行多个线程，每个线程都会执行相同的程序代码，共享同一数据区域和堆。可是，每个线程都拥有属于自己的栈，用来装载本地变量和函数调用链接信息。
15. /proc文件系统：是一种虚拟文件系统，以文件系统目录和文件形式，提供一个指向内核数据结构的接口，此外还能通过一组以/proc/PID形式命名的目录查看系统中运行各进程的相关信息。

